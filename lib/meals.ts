import fs from "node:fs";
import sql from "better-sqlite3";
import slugify from "slugify";
import xss from "xss";

const db = sql("meals.db");

export interface Meal {
  id?: string; // id is optional because it's auto-generated
  title: string;
  slug?: string; // slug is optional, will be generated by slugify
  image: string | File;
  instructions: string;
  summary: string;
  creator: string;
  creator_email: string;
}

export async function getMeals(): Promise<Meal[]> {
  await new Promise((resolve) => setTimeout(resolve, 5000));

  // throw new Error("Loading meals failed");
  return db.prepare("SELECT * FROM meals").all() as Meal[];
}

export function getMeal(slug: string) {
  // throw new Error("Loading meal failed");
  return db.prepare("SELECT * FROM meals WHERE slug = ?").get(slug) as Meal; // .get(slug) prevents from sql injection attack
}

export async function saveMeal(meal: Meal) {
  meal.slug = slugify(meal.title, { lower: true });
  meal.instructions = xss(meal.instructions);

  let fileName: string;

  // Check if meal.image is a File object
  if (meal.image instanceof File) {
    // Handle the File object directly
    const fileExtension = meal.image.name.split(".").pop(); // Get extension from file name
    fileName = `${meal.slug}.${fileExtension}`;

    const stream = fs.createWriteStream(`public/images/${fileName}`);
    const bufferedImage = Buffer.from(await meal.image.arrayBuffer()); // Convert file to buffer
    stream.write(bufferedImage, (error) => {
      if (error) {
        throw new Error("Saving image failed!");
      }
    });
    console.log("image was File type!");
  } else {
    // Assume it's a URL
    const extension = meal.image.split(".").pop(); // Get extension from URL
    fileName = `${meal.slug}.${extension}`;

    const stream = fs.createWriteStream(`public/images/${fileName}`);
    const bufferedImage = await fetch(meal.image).then((res) =>
      res.arrayBuffer()
    );
    stream.write(Buffer.from(bufferedImage), (error) => {
      if (error) {
        throw new Error("Saving image failed!");
      }
    });
    console.log("image was string type!");
  }

  meal.image = `/images/${fileName}`; // Save the image path

  db.prepare(
    `INSERT INTO meals (title, summary, instructions, creator, creator_email, image, slug) VALUES (?, ?, ?, ?, ?, ?, ?)`
  ).run(
    meal.title,
    meal.summary,
    meal.instructions,
    meal.creator,
    meal.creator_email,
    meal.image,
    meal.slug
  );
}
